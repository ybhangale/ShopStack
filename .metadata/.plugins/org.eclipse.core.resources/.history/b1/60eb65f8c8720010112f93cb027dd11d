package com.shopstack.service;

import com.razorpay.Order;
import com.razorpay.RazorpayClient;
import com.shopstack.models.Order;
import com.shopstack.models.Product;
import com.shopstack.models.User;
import com.shopstack.repositories.OrderRepository;
import com.shopstack.repositories.ProductRepository;
import com.shopstack.repositories.UserRepository;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;

@Service
public class PaymentService {
    @Autowired
    private OrderRepository orderRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private ProductRepository productRepository;

    private RazorpayClient razorpayClient;

    public PaymentService() throws Exception {
        // Replace with your Razorpay API keys
        this.razorpayClient = new RazorpayClient("YOUR_KEY_ID", "YOUR_KEY_SECRET");
    }

    public com.shopstack.models.Order createOrder(String username, Long productId, int quantity) throws Exception {
        User user = userRepository.findByUsername(username).orElseThrow();
        Product product = productRepository.findById(productId).orElseThrow();
        if (product.getQuantity() < quantity) throw new RuntimeException("Insufficient stock");
        double totalAmount = product.getPrice() * quantity;

        JSONObject orderRequest = new JSONObject();
        orderRequest.put("amount", (int)(totalAmount * 100)); // Razorpay expects amount in paise
        orderRequest.put("currency", "INR");
        orderRequest.put("receipt", "order_rcptid_" + System.currentTimeMillis());

        Order razorpayOrder = razorpayClient.orders.create(orderRequest);

        com.shopstack.models.Order order = com.shopstack.models.Order.builder()
                .user(user)
                .product(product)
                .quantity(quantity)
                .totalAmount(totalAmount)
                .paymentId(razorpayOrder.get("id"))
                .status("CREATED")
                .orderDate(new Date())
                .build();
        orderRepository.save(order);
        return order;
    }
}
